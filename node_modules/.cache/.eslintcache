[{"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\index.js":"1","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\App.jsx":"2","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\snippets\\localstorage.jsx":"3","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\header.jsx":"4","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\search.jsx":"5","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\settings.jsx":"6","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\words.jsx":"7","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\components\\word.jsx":"8","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\snippets\\dialog.jsx":"9","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\all.jsx":"10","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\snippets\\download.jsx":"11","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\components\\snackbar.jsx":"12","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\services\\dictionary.jsx":"13","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\services\\random.jsx":"14","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\report.jsx":"15"},{"size":273,"mtime":1661027709114,"results":"16","hashOfConfig":"17"},{"size":2884,"mtime":1661447555669,"results":"18","hashOfConfig":"17"},{"size":637,"mtime":1661415255250,"results":"19","hashOfConfig":"17"},{"size":429,"mtime":1661365531011,"results":"20","hashOfConfig":"17"},{"size":6784,"mtime":1661445389157,"results":"21","hashOfConfig":"17"},{"size":4585,"mtime":1661448610551,"results":"22","hashOfConfig":"17"},{"size":2175,"mtime":1661448727008,"results":"23","hashOfConfig":"17"},{"size":162,"mtime":1661030464735,"results":"24","hashOfConfig":"17"},{"size":703,"mtime":1661447804124,"results":"25","hashOfConfig":"17"},{"size":704,"mtime":1661377868778,"results":"26","hashOfConfig":"17"},{"size":313,"mtime":1661445595425,"results":"27","hashOfConfig":"17"},{"size":433,"mtime":1661447118043,"results":"28","hashOfConfig":"17"},{"size":283,"mtime":1661367444421,"results":"29","hashOfConfig":"17"},{"size":166,"mtime":1661367493440,"results":"30","hashOfConfig":"17"},{"size":824,"mtime":1661374524386,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"37s8sm",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"35"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\index.js",[],[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\App.jsx",["82","83"],[],"import { useEffect, useState, useReducer } from 'react';\r\n\r\nimport LocalStorage from './snippets/localstorage';\r\n\r\nimport initial from './data/initial.json';\r\n\r\nimport Header from './layouts/header';\r\nimport Search from './layouts/search';\r\n\r\nexport default function App() {\r\n   const storage = new LocalStorage('Vocabulary', '2.0', initial);\r\n\r\n   const [value, dispatch] = useReducer((state, action) => {\r\n      switch (action.type) {\r\n         case 'clear':\r\n            return {\r\n               ...state,\r\n               words: {\r\n                  ...state.words,\r\n                  history: [],\r\n               },\r\n            };\r\n         case 'edit':\r\n            return {\r\n               ...state,\r\n               ...action.payload,\r\n            };\r\n         case 'history':\r\n            return {\r\n               ...state,\r\n               words: {\r\n                  ...state.words,\r\n                  history: [...new Set([...state.words.history, ...action.payload])],\r\n               },\r\n            };\r\n         case 'reset':\r\n            return initial;\r\n         case 'rm':\r\n            return {\r\n               ...state,\r\n               words: {\r\n                  ...state.words,\r\n                  saved: state.words.saved.filter(w => action.payload !== w),\r\n               },\r\n            };\r\n         case 'save':\r\n            return {\r\n               ...state,\r\n               words: {\r\n                  ...state.words,\r\n                  saved: [...new Set([...state.words.saved, ...action.payload])],\r\n               },\r\n            };\r\n         default:\r\n            return value;\r\n      }\r\n   }, storage.value);\r\n\r\n   useEffect(() => {\r\n      storage.value = value;\r\n      storage.write();\r\n   }, [value]);\r\n\r\n   let [search, setSearch] = useState('');\r\n   let [results, setResults] = useState(<></>);\r\n\r\n   useEffect(() => {\r\n      if (localStorage.getItem('Vocabulary') !== null) {\r\n         let old = JSON.parse(localStorage.getItem('Vocabulary'));\r\n\r\n         dispatch({\r\n            type: 'save',\r\n            payload: old.learned,\r\n         });\r\n\r\n         dispatch({\r\n            type: 'history',\r\n            payload: old.history,\r\n         });\r\n\r\n         localStorage.removeItem('Vocabulary');\r\n      }\r\n\r\n      let url = new URL(window.location.href);\r\n\r\n      setSearch(value.settings.defaultWord || url.searchParams.get('q') || '');\r\n\r\n      let importUrl = url.searchParams.get('import');\r\n\r\n      if (importUrl) {\r\n         dispatch({\r\n            type: 'save',\r\n            payload: importUrl.split(','),\r\n         });\r\n      }\r\n   }, []);\r\n\r\n   return (\r\n      <>\r\n         <Header value={value} dispatch={dispatch} setSearch={setSearch} storage={storage} />\r\n         <Search value={value} dispatch={dispatch} search={search} setSearch={setSearch} setResults={setResults} />\r\n         <div id='results'>{results}</div>\r\n      </>\r\n   );\r\n}\r\n","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\snippets\\localstorage.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\header.jsx",["84"],[],"import Settings from './settings';\r\nimport Words from './words';\r\n\r\nexport default function Header({ value, dispatch, setSearch, storage={storage} }) {\r\n   return (\r\n      <header>\r\n         <h1>Vocabulary</h1>\r\n         <div>\r\n            <Words value={value} dispatch={dispatch} setSearch={setSearch} />\r\n            <Settings value={value} dispatch={dispatch} storage={storage} />\r\n         </div>\r\n      </header>\r\n   );\r\n}\r\n","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\search.jsx",["85"],[],"import { useEffect, useState } from 'react';\r\n\r\nimport arrows from '../assets/arrows.png';\r\nimport points from '../assets/points.png';\r\nimport lens from '../assets/lens.png';\r\nimport info from '../data/info.json';\r\n\r\nimport Dictionary from '../services/dictionary';\r\nimport Random from '../services/random';\r\nimport Report from './report';\r\nimport Word from '../components/word';\r\nimport Snackbar from '../components/snackbar';\r\n\r\nexport default function Search({ value, dispatch, search, setSearch, setResults }) {\r\n   let [input, setInput] = useState(search);\r\n\r\n   let research = () => setSearch(document.querySelector('input[type=\"search\"]').value);\r\n\r\n   useEffect(() => {\r\n      if ([null, ''].includes(search.replaceAll(' ', ''))) {\r\n         setResults(<></>);\r\n\r\n         return;\r\n      }\r\n\r\n      setInput(search);\r\n      setResults(\r\n         <span>\r\n            Searching <Word w={search} setSearch={setSearch} />\r\n            ...\r\n         </span>\r\n      );\r\n\r\n      Dictionary(search)\r\n         .then(response => {\r\n            response = response[0];\r\n\r\n            setResults(\r\n               <>\r\n                  <div id='header'>\r\n                     <span>\r\n                        <h2>\r\n                           <Word w={search} setSearch={setSearch} />\r\n                        </h2>\r\n                        {response.phonetic}\r\n                     </span>\r\n                     <div>\r\n                        <input\r\n                           type='checkbox'\r\n                           defaultChecked={value.words.saved.includes(search)}\r\n                           onChange={e => {\r\n                              e = e.target.checked;\r\n\r\n                              if (e) {\r\n                                 dispatch({\r\n                                    type: 'save',\r\n                                    payload: [search],\r\n                                 });\r\n\r\n                                 Snackbar('Word saved');\r\n                              } else {\r\n                                 dispatch({\r\n                                    type: 'rm',\r\n                                    payload: search,\r\n                                 });\r\n\r\n                                 Snackbar('Word removed');\r\n                              }\r\n                           }}\r\n                           title='Save/remove'\r\n                        />\r\n                        <img\r\n                           src={points}\r\n                           alt='Share'\r\n                           onClick={() => {\r\n                              window.navigator.share({\r\n                                 title: `Word ${search} on Vocabulary`,\r\n                                 url: `${info.start_url}?q=${search}`,\r\n                              });\r\n                           }}\r\n                           title='Share'\r\n                        />\r\n                     </div>\r\n                  </div>\r\n                  <div id='results'>\r\n                     {response.meanings.map(meaning => {\r\n                        return (\r\n                           <div key={meaning.partOfSpeech}>\r\n                              <h3>{meaning.partOfSpeech}</h3>\r\n                              <ol>\r\n                                 {meaning.definitions.slice(0, 5).map(word => (\r\n                                    <li key={word.definition}>{word.definition}</li>\r\n                                 ))}\r\n                              </ol>\r\n                              {meaning.synonyms.length !== 0 && (\r\n                                 <div>\r\n                                    <b>Synonyms</b>\r\n                                    <ul>\r\n                                       {meaning.synonyms.map(word => (\r\n                                          <li key={word}>\r\n                                             <Word w={word} setSearch={setSearch} />\r\n                                          </li>\r\n                                       ))}\r\n                                    </ul>\r\n                                 </div>\r\n                              )}\r\n                              {meaning.antonyms.length !== 0 && (\r\n                                 <div>\r\n                                    <b>Antonyms</b>\r\n                                    <ul>\r\n                                       {meaning.antonyms.map(word => (\r\n                                          <li key={word}>\r\n                                             <Word w={word} setSearch={setSearch} />\r\n                                          </li>\r\n                                       ))}\r\n                                    </ul>\r\n                                 </div>\r\n                              )}\r\n                           </div>\r\n                        );\r\n                     })}\r\n                  </div>\r\n                  {response.sourceUrls.length !== 0 && (\r\n                     <div>\r\n                        <b>Sources</b>\r\n                        <ul>\r\n                           {response.sourceUrls.map(source => (\r\n                              <li key={source}>\r\n                                 <a href={source}>{new URL(source).host}</a>\r\n                              </li>\r\n                           ))}\r\n                        </ul>\r\n                     </div>\r\n                  )}\r\n               </>\r\n            );\r\n         })\r\n         .catch(() => {\r\n            setResults(\r\n               <div id='error'>\r\n                  <div>\r\n                     <span>Word </span>\r\n                     <Word w={search} setSearch={setSearch} />\r\n                     <span> not found </span>\r\n                  </div>\r\n                  <Report word={search} />\r\n               </div>\r\n            );\r\n         });\r\n   }, [search]);\r\n\r\n   return (\r\n      <nav>\r\n         <input\r\n            type='search'\r\n            autoFocus\r\n            list='datalist'\r\n            onChange={e => setInput(e.target.value.toLowerCase())}\r\n            onKeyUp={e => {\r\n               if (e.key === 'Enter') research();\r\n               if (e.ctrlKey === true && e.key === 'q')\r\n                  try {\r\n                     document.querySelector('input[type=\"checkbox\"]').click();\r\n                  } catch {}\r\n            }}\r\n            placeholder='Search a word...'\r\n            value={input}\r\n         />\r\n         <datalist id='datalist'>\r\n            {value.words.history.map(word => (\r\n               <option key={word}>{word}</option>\r\n            ))}\r\n         </datalist>\r\n         <div>\r\n            <img src={arrows} alt='Random' onClick={() => Random().then(word => setSearch(word[0]))} title='Random' />\r\n            <img src={lens} alt='Search' onClick={research} title='Search' />\r\n         </div>\r\n      </nav>\r\n   );\r\n}\r\n","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\settings.jsx",["86"],[],"import { useEffect, useReducer } from 'react';\r\n\r\nimport Dialog from '../snippets/dialog';\r\nimport download from '../snippets/download';\r\n\r\nimport gear from '../assets/gear.png';\r\n\r\nimport Snackbar from '../components/snackbar';\r\nimport Dictionary from '../services/dictionary';\r\n\r\nexport default function Settings({ value, dispatch, storage }) {\r\n   let [settings, dispatchS] = useReducer((state, action) => {\r\n      switch (action.type) {\r\n         case 'defaultWord':\r\n            return {\r\n               ...state,\r\n               defaultWord: action.payload,\r\n            };\r\n         default:\r\n            return settings;\r\n      }\r\n   }, value.settings);\r\n\r\n   useEffect(() => {\r\n      dispatch({\r\n         type: 'edit',\r\n         payload: {\r\n            settings: settings,\r\n         },\r\n      });\r\n   }, [settings]);\r\n\r\n   return (\r\n      <Dialog id='settings' icon={gear}>\r\n         <div id='defaultWord'>\r\n            <span>Deafult word</span>\r\n            <input\r\n               type='text'\r\n               onChange={e => {\r\n                  dispatchS({\r\n                     type: 'defaultWord',\r\n                     payload: e.target.value.toLowerCase(),\r\n                  });\r\n               }}\r\n               placeholder='Word...'\r\n               value={settings.defaultWord ?? ''}\r\n            />\r\n         </div>\r\n         <div>\r\n            <h2>Files</h2>\r\n            <div id='files'>\r\n               <button\r\n                  type='button'\r\n                  onClick={() => {\r\n                     download(\r\n                        `Vocabulary ${new Date().toISOString()}.txt`,\r\n                        'text/plain',\r\n                        JSON.stringify(value.words.saved).slice(1).replace(']', '').replaceAll('\"', '')\r\n                     );\r\n\r\n                     Snackbar('Words downloaded');\r\n                  }}>\r\n                  Download words\r\n               </button>\r\n               <div>\r\n                  <span>Upload words</span>\r\n                  <input\r\n                     type='file'\r\n                     onChange={e => {\r\n                        let reader = new FileReader();\r\n\r\n                        reader.readAsText(e.target.files[0]);\r\n                        reader.onload = () => {\r\n                           let words = String(reader.result.replaceAll('\\r\\n', '').replaceAll(/,+/g, ',')).split(',');\r\n\r\n                           words.forEach(word => {\r\n                              Dictionary(word).catch(() => {\r\n                                 words.filter(w => word !== w);\r\n                              });\r\n                           });\r\n\r\n                           dispatch({\r\n                              type: 'save',\r\n                              payload: words,\r\n                           });\r\n\r\n                           Snackbar(`Upload completed`);\r\n                        };\r\n                     }}\r\n                  />\r\n               </div>\r\n            </div>\r\n         </div>\r\n         <div>\r\n            <h2>Danger zone</h2>\r\n            <div id='dangerZone'>\r\n               <button\r\n                  type='button'\r\n                  onClick={() => {\r\n                     dispatch({\r\n                        type: 'clear',\r\n                     });\r\n\r\n                     Snackbar('History cleaned');\r\n                  }}>\r\n                  Clear history\r\n               </button>\r\n               <button\r\n                  type='button'\r\n                  onClick={() => {\r\n                     if (window.confirm('Are you sure you want to delete all words?')) {\r\n                        dispatch({\r\n                           type: 'edit',\r\n                           payload: {\r\n                              words: {\r\n                                 ...value.words,\r\n                                 saved: [],\r\n                              },\r\n                           },\r\n                        });\r\n\r\n                        Snackbar('Words deleted');\r\n                     }\r\n                  }}>\r\n                  Delete words\r\n               </button>\r\n               <button\r\n                  type='button'\r\n                  onClick={() => {\r\n                     if (window.confirm('Are you sure you want to reset everything?')) {\r\n                        dispatch({\r\n                           type: 'reset',\r\n                        });\r\n\r\n                        Snackbar('Reset completed');\r\n                     }\r\n                  }}>\r\n                  Reset\r\n               </button>\r\n            </div>\r\n         </div>\r\n      </Dialog>\r\n   );\r\n}\r\n","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\words.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\components\\word.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\snippets\\dialog.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\all.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\snippets\\download.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\components\\snackbar.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\services\\dictionary.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\services\\random.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\report.jsx",[],[],{"ruleId":"87","severity":1,"message":"88","line":62,"column":7,"nodeType":"89","endLine":62,"endColumn":14,"suggestions":"90"},{"ruleId":"87","severity":1,"message":"91","line":96,"column":7,"nodeType":"89","endLine":96,"endColumn":9,"suggestions":"92"},{"ruleId":"93","severity":1,"message":"94","line":4,"column":71,"nodeType":"95","messageId":"96","endLine":4,"endColumn":78},{"ruleId":"87","severity":1,"message":"97","line":150,"column":7,"nodeType":"89","endLine":150,"endColumn":15,"suggestions":"98"},{"ruleId":"87","severity":1,"message":"99","line":31,"column":7,"nodeType":"89","endLine":31,"endColumn":17,"suggestions":"100"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'storage'. Either include it or remove the dependency array.","ArrayExpression",["101"],"React Hook useEffect has a missing dependency: 'value.settings.defaultWord'. Either include it or remove the dependency array.",["102"],"no-use-before-define","'storage' was used before it was defined.","Identifier","usedBeforeDefined","React Hook useEffect has missing dependencies: 'dispatch', 'setResults', 'setSearch', and 'value.words.saved'. Either include them or remove the dependency array. If 'setResults' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["103"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["104"],{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [storage, value]",{"range":"113","text":"114"},"Update the dependencies array to be: [value.settings.defaultWord]",{"range":"115","text":"116"},"Update the dependencies array to be: [dispatch, search, setResults, setSearch, value.words.saved]",{"range":"117","text":"118"},"Update the dependencies array to be: [dispatch, settings]",{"range":"119","text":"120"},[1722,1729],"[storage, value]",[2576,2578],"[value.settings.defaultWord]",[5779,5787],"[dispatch, search, setResults, setSearch, value.words.saved]",[813,823],"[dispatch, settings]"]