[{"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\index.js":"1","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\App.jsx":"2","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\snippets\\localstorage.jsx":"3","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\header.jsx":"4","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\search.jsx":"5","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\settings.jsx":"6","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\words.jsx":"7","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\components\\word.jsx":"8","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\snippets\\dialog.jsx":"9","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\all.jsx":"10","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\snippets\\download.jsx":"11","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\components\\snackbar.jsx":"12","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\services\\dictionary.jsx":"13","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\services\\random.jsx":"14","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\report.jsx":"15","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\reported.jsx":"16","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\bar.jsx":"17","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\error.jsx":"18"},{"size":266,"mtime":1662154184676,"results":"19","hashOfConfig":"20"},{"size":2956,"mtime":1662369314563,"results":"21","hashOfConfig":"20"},{"size":608,"mtime":1662155752994,"results":"22","hashOfConfig":"20"},{"size":418,"mtime":1662156427602,"results":"23","hashOfConfig":"20"},{"size":5215,"mtime":1662371033877,"results":"24","hashOfConfig":"20"},{"size":4112,"mtime":1662369916639,"results":"25","hashOfConfig":"20"},{"size":2126,"mtime":1662157831939,"results":"26","hashOfConfig":"20"},{"size":345,"mtime":1661603841818,"results":"27","hashOfConfig":"20"},{"size":678,"mtime":1662157055638,"results":"28","hashOfConfig":"20"},{"size":806,"mtime":1662159318591,"results":"29","hashOfConfig":"20"},{"size":301,"mtime":1661457623466,"results":"30","hashOfConfig":"20"},{"size":425,"mtime":1661596353391,"results":"31","hashOfConfig":"20"},{"size":274,"mtime":1661457623347,"results":"32","hashOfConfig":"20"},{"size":163,"mtime":1661457623368,"results":"33","hashOfConfig":"20"},{"size":890,"mtime":1662156645893,"results":"34","hashOfConfig":"20"},{"size":430,"mtime":1662156614148,"results":"35","hashOfConfig":"20"},{"size":1498,"mtime":1662370807454,"results":"36","hashOfConfig":"20"},{"size":313,"mtime":1662370895175,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"aaby2c",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\index.js",[],[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\App.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\snippets\\localstorage.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\header.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\search.jsx",["94"],[],"import React from 'react';\nimport { useEffect, useState } from 'react';\n\nimport arrows from '../assets/arrows.png';\nimport lens from '../assets/lens.png';\n\nimport Dictionary from '../services/dictionary';\nimport Error from './error';\nimport Random from '../services/random';\nimport Report from './report';\nimport Word from '../components/word';\nimport Bar from './bar';\n\nexport default function Search({ value, dispatch, search, setSearch, setResults }) {\n   let [input, setInput] = useState(search);\n\n   let research = () => setSearch(document.querySelector('input[type=\"search\"]').value);\n\n   useEffect(() => {\n      try {\n         if ([null, ''].includes(search.replaceAll(' ', ''))) throw <></>;\n         if (!navigator.onLine)\n            throw (\n               <Error value={value} dispatch={dispatch} search={search} setSearch={setSearch}>\n                  No internet connection\n               </Error>\n            );\n      } catch (node) {\n         setResults(node);\n\n         return;\n      }\n\n      setInput(search);\n      setResults(\n         <span>\n            Searching <Word setSearch={setSearch}>{search}</Word>\n            ...\n         </span>\n      );\n\n      Dictionary(search)\n         .then(response => {\n            response = response[0];\n\n            setResults(\n               <>\n                  <Bar value={value} dispatch={dispatch} search={search} setSearch={setSearch} phonetic={response.phonetic} />\n                  <div>\n                     {response.meanings.map(meaning => {\n                        return (\n                           <div key={meaning.partOfSpeech}>\n                              <h3>{meaning.partOfSpeech}</h3>\n                              <ol>\n                                 {meaning.definitions.slice(0, 5).map(word => (\n                                    <li key={word.definition}>{word.definition}</li>\n                                 ))}\n                              </ol>\n                              {meaning.synonyms.length !== 0 && (\n                                 <div>\n                                    <b>Synonyms</b>\n                                    <ul>\n                                       {meaning.synonyms.map(word => (\n                                          <li key={word}>\n                                             <Word setSearch={setSearch}>{word}</Word>\n                                          </li>\n                                       ))}\n                                    </ul>\n                                 </div>\n                              )}\n                              {meaning.antonyms.length !== 0 && (\n                                 <div>\n                                    <b>Antonyms</b>\n                                    <ul>\n                                       {meaning.antonyms.map(word => (\n                                          <li key={word}>\n                                             <Word setSearch={setSearch}>{word}</Word>\n                                          </li>\n                                       ))}\n                                    </ul>\n                                 </div>\n                              )}\n                           </div>\n                        );\n                     })}\n                  </div>\n                  {response.sourceUrls.length !== 0 && (\n                     <div id='sources'>\n                        <b>Sources</b>\n                        <ul>\n                           {response.sourceUrls.map(source => (\n                              <li key={source}>\n                                 <a href={source}>{new URL(source).host}</a>\n                              </li>\n                           ))}\n                        </ul>\n                     </div>\n                  )}\n               </>\n            );\n         })\n         .catch(() => {\n            setResults(\n               <Error value={value} dispatch={dispatch} search={search} setSearch={setSearch}>\n                  <div>\n                     <span>Word </span>\n                     <Word setSearch={setSearch}>{search}</Word>\n                     <span> not found </span>\n                  </div>\n                  <Report word={search} />\n               </Error>\n            );\n         });\n   }, [search]);\n\n   return (\n      <nav id='search'>\n         <input\n            type='search'\n            list='datalist'\n            onChange={e => setInput(e.target.value.toLowerCase())}\n            onKeyUp={e => {\n               if (e.key === 'Enter') research();\n               if (e.ctrlKey === true && e.key === 'q')\n                  try {\n                     document.querySelector('input[type=\"checkbox\"]').click();\n                  } catch {}\n            }}\n            placeholder='Search a word...'\n            value={input}\n         />\n         <datalist id='datalist'>\n            {value.words.history.map(word => (\n               <option key={word}>{word}</option>\n            ))}\n         </datalist>\n         <div>\n            <img src={arrows} alt='Random' onClick={() => Random().then(word => setSearch(word[0]))} />\n            <img src={lens} alt='Search' onClick={research} />\n         </div>\n      </nav>\n   );\n}\n","C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\settings.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\words.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\components\\word.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\snippets\\dialog.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\all.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\snippets\\download.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\components\\snackbar.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\services\\dictionary.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\services\\random.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\report.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\reported.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\bar.jsx",[],[],"C:\\Users\\titti\\Desktop\\Vocabulary\\src\\layouts\\error.jsx",[],[],{"ruleId":"95","severity":1,"message":"96","line":127,"column":27,"nodeType":"97","messageId":"98","endLine":127,"endColumn":29},"no-empty","Empty block statement.","BlockStatement","unexpected"]